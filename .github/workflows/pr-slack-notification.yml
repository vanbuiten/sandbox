name: pr-slack-notification

on:
  pull_request:
    types:
      - opened
      - ready_for_review
      - review_requested
  pull_request_review:
    types:
      - submitted

permissions: read-all

defaults:
  run:
    shell: bash -euxo pipefail {0}

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Debug
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GITHUB_CONTEXT}"

  pr-slack-notification:
    runs-on: ubuntu-latest
    name: Sends a message to Slack when a PR is opened
    if: (github.event.action == 'opened' && github.event.pull_request.draft == false) || github.event.action == 'ready_for_review'
    steps:
      - name: Check if a slack message timestamp is already present in the cache
        uses: actions/cache@v4.2.3
        id: slack-message-timestamp-cache
        with:
          path: slack-message-timestamp.txt
          key: slack-message-timestamp-for-pr-${{ github.event.pull_request.number }}

      - name: Post PR summary message to slack
        if: steps.slack-message-timestamp-cache.outputs.cache-hit != 'true'
        id: message
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.MY_SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.MY_SLACK_CHANNEL_ID }}
            text: "A PR has been created in repository ${{ github.repository }}: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}"

      - name: Post PR reaction
        if: steps.slack-message-timestamp-cache.outputs.cache-hit != 'true'
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.MY_SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.MY_SLACK_CHANNEL_ID }}
            thread_ts: "${{ steps.message.outputs.ts }}"
            unfurl_links: false
            unfurl_media: false
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":eyes: *1. Review the PR*\nAssign <${{ github.event.pull_request.html_url }}|PR #${{ github.event.pull_request.number }}> to yourself"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":seedling: *2. Deploy the PR on dev/acc*\nDeploy the branch to dev and/or acc\n${{ vars.DEV_ACC_ADDITIONAL_INFO }}"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":bulb: *3. Check the Trivy output*\nCheck if there are any vunerable packages in reported by Trivy that can be fixed"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":mag: *4. Check dev/acc*\nCheck if dev and/or acc are still working"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":twisted_rightwards_arrows: *5. Merge the PR*\nMerge the PR to main"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":label: *6. Create a new release*\nCreate a new release"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":rocket: *7. Deploy the new release to prod*\nDeploy the release to prod\n${{ vars.PROD_ADDITIONAL_INFO }}"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":mag_right: *8. Check prod*\nCheck if prod is still working"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":clock1: *9. Timetell code*\nCode: *${{secrets.TIMETELL_CODE}}*"
                }
              }
            ]

      - name: Create file with slack message timestamp
        if: steps.slack-message-timestamp-cache.outputs.cache-hit != 'true'
        run: |
          echo "${{ steps.message.outputs.ts }}" > slack-message-timestamp.txt


  slack-emoji-react:
    runs-on: ubuntu-latest
    name: Adds emoji reaction to slack message when a PR is closed or reviewed
    if: ${{ startsWith(github.event.pull_request.html_url, 'https') || startsWith(github.event.issue.pull_request.html_url, 'https') }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Check if a slack message timestamp is already present in the cache
        uses: actions/cache@v4.2.3
        id: slack-message-timestamp-cache
        with:
          path: slack-message-timestamp.txt
          key: slack-message-timestamp-for-pr-${{ github.event.pull_request.number }}

      - name: Read timestamp from cache
        id: slack-message-timestamp
        run: |
          echo "timestamp=$(cat slack-message-timestamp.txt)" >> $GITHUB_OUTPUT

      - name: Decide which emoji to add
        id: emoji-to-add
        if: steps.slack-message-timestamp-cache.outputs.cache-hit == 'true'
        run: |
          case "${{ github.event.action }}" in
            submitted)
              case "${{ github.event.review.state }}" in
                approved)
                  echo "emoji=white_check_mark" >> $GITHUB_OUTPUT
                  ;;
              esac
              ;;
            review_requested)
              echo "emoji=eyes" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "emoji=false" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: React to PR summary message in slack with emoji
        if: ${{ steps.slack-message-timestamp-cache.outputs.cache-hit == 'true' && steps.emoji-to-add.outputs.emoji != 'false' }}
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: reactions.add
          token: ${{ secrets.MY_SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.MY_SLACK_CHANNEL_ID }}
            timestamp: "${{ steps.slack-message-timestamp.outputs.timestamp }}"
            name: ${{ steps.emoji-to-add.outputs.emoji }}
